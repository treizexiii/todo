@page "/todos"
@using Core.Dto
@using WebApp.Tools

@inject IJsLogger<Todos> Logger
@inject TodoServiceFacade TodoServiceFacade

<PageTitle>Todos</PageTitle>

<h1>Todos</h1>

@if (_todos == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table table-hover">
        <thead class="thead-dark">
        <tr>
            <th scope="col">Title</th>
            <th scope="col"></th>
            <th scope="col">Created at</th>
            <th scope="col"></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var todo in _todos)
        {
            <tr @onclick="() => SelectTodo(todo.Id)">
                <td colspan="2">@todo.Title</td>
                <td>@todo.CreatedAt.ToFrenchDate()</td>
                <td></td>
            </tr>
        }
        </tbody>
    </table>
    <div class="d-flex justify-content-between">
        <input class="form-control m-2" type="text" @bind="_title"/>
        @* <input class="form-control m-2" type="datetime-local" @bind="_dueDate"/> *@
        <button class="btn btn-outline-primary m-2" @onclick="AddTodo">
            add
        </button>
    </div>
}

@if (_selectedTodo != Guid.Empty)
{
    <TodoComponent Id="@_selectedTodo"/>
}


@code {
    private List<TodoHeaderDto>? _todos;
    private string? _title;
    private string? _description;
    private DateTime? _dueDate;

    private Guid _selectedTodo = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Logger.LogInformation("OnInitializedAsync");
        var todos = await TodoServiceFacade.GetAllAsync();
        _todos = todos.ToList();
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(_title))
        {
            return;
        }

        var newTodo = new CreateTodo(_title, _description, _dueDate);
        var todo = await TodoServiceFacade.CreateAsync(newTodo);
        var dto = new TodoHeaderDto(todo.Id, todo.Title, todo.Description, todo.IsCompleted, todo.CreatedAt, todo.UpdatedAt, null, null);
        _todos?.Add(dto);

        _title = null;
        _description = null;
        _dueDate = null;

        StateHasChanged();
    }

    private async Task SelectTodo(Guid todoId)
    {
        await Logger.LogInformation($"Select Todo {todoId}");
        _selectedTodo = todoId;
        StateHasChanged();
    }

}