@using Core.Dto
@using WebApp.Tools

@inject IJsLogger<TodoComponent> Logger
@inject TodoService TodoService

@if (_todoDto == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="list-group">
        <div class="list-group-item" aria-current="true">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1">@_todoDto.Title</h5>
                <small>@_todoDto.CreatedAt.ToFrenchDate()</small>
            </div>
            <p class="mb-1">@_todoDto.Description</p>
        </div>
        <div class="list-group-item" aria-current="true">
            <ul class="list-group list-group-flush">
                @foreach (var item in _todoDto.Items.OrderBy(i => i.CreatedAt))
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => CheckItem(item.Id)">
                        <div class="d-flex flex-row w-100 justify-content-between">
                            @item.Title
                            @if (item.IsCompleted)
                            {
                                <span class="badge bg-success rounded-pill">
                                    <i class="bi bi-check2-circle"></i>
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-warning rounded-pill">
                                    <i class="bi bi-circle"></i>
                                </span>
                            }
                        </div>
                    </li>
                }
                <li class="list-group-item list-group-item-action">
                    <div class="d-flex flex-row w-100 justify-content-between">
                        <input type="text" class="form-control w-75" @bind="_newItem"/>
                        <button type="button" class="btn btn-primary" @onclick="AddNewItem">
                            <i class="bi bi-file-earmark-plus"></i>
                        </button>
                    </div>

                </li>
            </ul>
        </div>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private TodoDto? _todoDto;
    private List<ItemDto>? _items;
    private string? _newItem;

    protected override async Task OnParametersSetAsync()
    {
        await OnLoad();
    }

    private async Task OnLoad()
    {
        _todoDto = await TodoService.GetAsync(Id);
        _items = _todoDto?.Items;
        await Logger.LogInformation("Todo loaded");
    }

    private async Task AddNewItem()
    {
        if (_newItem != null)
        {
            var utc = DateTime.UtcNow;
            var newItem = new ItemDto(
                Guid.NewGuid(),
                _newItem,
                null,
                false,
                utc,
                utc,
                null,
                null
            );
            _todoDto?.Items.Add(newItem);
            _items = _todoDto?.Items;
            _newItem = null;
            await Logger.LogInformation("New item added");
        }
        else
        {
            await Logger.LogWarning("New item title is missing");
        }

        StateHasChanged();
    }

    private Task CheckItem(Guid itemId)
    {
        var item = _todoDto?.Items.FirstOrDefault(x => x.Id == itemId);
        if (item != null)
        {
            var completedItem = item with { IsCompleted = !item.IsCompleted };
            _todoDto?.Items.Remove(item);
            _todoDto?.Items.Add(completedItem);
            _items = _todoDto?.Items;
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

}