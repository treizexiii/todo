// <auto-generated />
using System;
using Authentication.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Authentication.Persistence.Migrations
{
    [DbContext(typeof(IdentityDb))]
    [Migration("20240211212259_Secrets")]
    partial class Secrets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Authentication.Domain.Entities.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_claims");

                    b.HasIndex("Name", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_claims_name_type");

                    b.ToTable("claims", (string)null);
                });

            modelBuilder.Entity("Authentication.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8a419a0-f0e4-4571-8e40-60fda468d56c"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("f3549e74-b5c5-4849-9507-956960239a40"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Authentication.Domain.Entities.Secret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closedat");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("openedat");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ownerid");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revokedat");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_secrets");

                    b.ToTable("secrets", (string)null);
                });

            modelBuilder.Entity("Authentication.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<byte[]>("HashToken")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hashtoken");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revokedat");

                    b.Property<byte[]>("SaltToken")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salttoken");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tokens_userid");

                    b.ToTable("tokens", (string)null);
                });

            modelBuilder.Entity("Authentication.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activatedat");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedat");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean")
                        .HasColumnName("isactivated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_roleid");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Authentication.Domain.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("claimid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userclaims");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_userclaims_claimid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userclaims_userid");

                    b.ToTable("userclaims", (string)null);
                });

            modelBuilder.Entity("Authentication.Domain.Entities.Token", b =>
                {
                    b.HasOne("Authentication.Domain.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tokens_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Authentication.Domain.Entities.User", b =>
                {
                    b.HasOne("Authentication.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_roleid");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Authentication.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("Authentication.Domain.Entities.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userclaims_claims_claimid");

                    b.HasOne("Authentication.Domain.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userclaims_users_userid");

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Authentication.Domain.Entities.Claim", b =>
                {
                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Authentication.Domain.Entities.User", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("UserClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
