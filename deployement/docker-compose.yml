version: "3"

services:
  api:
    container_name: api
    build:
      context: ../.
      dockerfile: src/Api/Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
    extra_hosts:
      - "todo-db:${IP_ADDRESS}"
    depends_on:
      - postgres

  db-command:
    container_name: db-command
    build:
      context: ../.
      dockerfile: src/Persistence/Persistence.MigrationTool/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
    tty: true
    extra_hosts:
      - "todo-db:${IP_ADDRESS}"
    depends_on:
      - postgres

  identity-server:
    container_name: identity-server
    build:
      context: ../.
      dockerfile: src/Authentication/Authentication.IdentityServer/Dockerfile
    ports:
      - "7000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
    extra_hosts:
      - "identity-db:${IP_ADDRESS}"
    depends_on:
      - postgres

  postgres:
    container_name: postgres
    image: postgres:13.13
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - "${DATA_DIR}/postgres:/var/lib/postgresql/data"

  web-app:
    container_name: web-app
    build:
      context: ../.
      dockerfile: src/WebApp/Dockerfile
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - API_URL=http://${IP_ADDRESS}:5000

#  grpc-server:
#    build:
#      context: ../.
#      dockerfile: src/GrpcService/Dockerfile
#    container_name: grpc-server
#    ports:
#      - "127.0.0.1:8080:8080"
#    environment:
#      - ASPNETCORE_ENVIRONMENT=Development